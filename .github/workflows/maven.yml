# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]


jobs:
  build:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "StrongP@ssw0rd123"

    env:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://localhost:1433;databaseName=SME_DB;encrypt=true;trustServerCertificate=true
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: StrongP@ssw0rd123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

#      - name: Install SQL Server Tools (sqlcmd)
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y curl apt-transport-https gnupg2
#          # Add the Microsoft GPG key
#          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
#          # Add the Microsoft package repository for Ubuntu 20.04
#          sudo add-apt-repository "$(curl -s https://packages.microsoft.com/config/ubuntu/20.04/prod.list)"
#          sudo apt-get update
#          # Install the required packages
#          ACCEPT_EULA=Y sudo apt-get install -y msodbcsql17 mssql-tools
#          # Add mssql-tools to PATH
#          echo "PATH=\"\$PATH:/opt/mssql-tools/bin\"" >> $GITHUB_ENV
#
#      - name: Install netcat
#        run: sudo apt-get install -y netcat
#
#      - name: Wait for SQL Server to be healthy
#        run: |
#          for i in {1..30}; do
#            if nc -z localhost 1433; then
#              echo "✅ SQL Server ready"
#              break
#            fi
#            echo "⏳ Waiting for SQL Server..."
#            sleep 2
#          done
#
#      - name: Create SME_DB database
#        run: echo "CREATE DATABASE SME_DB;" | sqlcmd -S localhost -U sa -P "$SPRING_DATASOURCE_PASSWORD"

      - name: Build and run tests
        run: mvn clean verify --batch-mode

